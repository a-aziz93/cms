[versions]
agp = "8.1.4"
android-compile-sdk = "34"
android-min-sdk = "24"
android-target-sdk = "34"
androidx-activity-compose = "1.8.1"
androidx-appcompat = "1.6.1"
androidx-constraint-layout = "2.1.4"
androidx-core-ktx = "1.12.0"
androidx-espresso-core = "3.5.1"
androidx-material = "1.10.0"
androidx-test-junit = "1.1.5"
compose = "1.5.4"
compose-compiler = "1.5.5"
compose-plugin = "1.6.0-alpha01"
junit = "4.13.2"
kotlin = "1.9.21"
ktor = "2.3.6"
ktorfit-lib = "ktorfitVersion"
logback = "1.4.14"
kermit = "2.0.2"
lyricist = "1.6.2"
ksp = "1.9.21-1.0.15"
maps-google = "0.6.0"
material3-adaptive = "1.0.0-alpha01"
material3-window-size = "1.2.0-alpha12"
material3-window-size-multiplatform = "0.5.0-alpha03"
compose-icons = "1.1.0"
kotlin-reflect = "2.0.0-Beta1"
multiplatform-settings = "1.1.1"
koin = "3.5.2-RC1"
koin-compose = "1.1.1-RC1"
koin-ksp-compiler = "1.3.0"
kgraphql = "0.19.0"
apollo3 = "4.0.0-beta.3"
sql-delight = "2.0.1"
mvi-kotlin = "4.0.0-alpha01"
decompose = "3.0.0-alpha01"
lifecycle = "2.0.0-alpha01"
android-play = "1.10.3"
coroutines = "1.8.0-RC"
kamel-image = "0.9.0"
ktor-swagger-ui = "2.7.2"
dokka = "1.9.10"
kotlinx-datetime = "0.5.0"
kotlinx-io-core = "0.3.0"
cache4k = "0.12.0"
kotlin-logging-jvm = "4.0.0-beta-2"
kotysa-r2dbc = "3.2.1"
r2dbc-pool = "1.0.1.RELEASE"
r2dbc-h2 = "1.0.0.RELEASE"
oracle-r2dbc = "1.2.0"
kotlin-result = "1.1.18"
bcrypt = "2.2.0"
kotlin-noarg = "2.0.0-Beta2"
reflections = "0.10.2"
hoplite = "2.8.0.RC3"
kmputils = "1.1.2"
ktorfit = "1.11.1"
konfigure = "1.3.1"
kotlinx-serialization = "1.6.2"
slf4j = "2.0.9"
data-table = "0.5.1"
tcnative = "2.0.62.Final"
kconmapper = "1.0.0-alpha08"
worldwind = "1.3.7"
gov-worldwind = "2.1.0.180"
compose-material-context-menu = "0.2.0"

[libraries]
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "androidx-core-ktx" }
androidx-test-junit = { group = "androidx.test.ext", name = "junit", version.ref = "androidx-test-junit" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "androidx-espresso-core" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "androidx-appcompat" }
androidx-material = { group = "com.google.android.material", name = "material", version.ref = "androidx-material" }
androidx-constraint-layout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "androidx-constraint-layout" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity-compose" }
compose-ui = { module = "androidx.compose.ui:ui", version.ref = "compose" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "compose" }
compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "compose" }
compose-material = { module = "androidx.compose.material:material", version.ref = "compose" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
# Ktor common
# serialization
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-serialization-kotlinx-xml = { module = "io.ktor:ktor-serialization-kotlinx-xml", version.ref = "ktor" }
ktor-serialization-kotlinx-cbor = { module = "io.ktor:ktor-serialization-kotlinx-cbor", version.ref = "ktor" }
ktor-serialization-kotlinx-protobuf = { module = "io.ktor:ktor-serialization-kotlinx-protobuf", version.ref = "ktor" }
# ssl/tls
ktor-network-tls-certificates = { module = "io.ktor:ktor-network-tls-certificates", version.ref = "ktor" }

# Ktor HTTP Server
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-tests = { module = "io.ktor:ktor-server-tests", version.ref = "ktor" }
# Ktor Yaml configuration file
ktor-server-config-yaml = { module = "io.ktor:ktor-server-config-yaml", version.ref = "ktor" }
# Ktor HTTP Server plugins
# cors
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
# auth jwt
ktor-server-auth = { module = "io.ktor:ktor-server-auth", version.ref = "ktor" }
ktor-server-auth-jwt = { module = "io.ktor:ktor-server-auth-jwt", version.ref = "ktor" }
ktor-server-host-common = { module = "io.ktor:ktor-server-host-common", version.ref = "ktor" }
# compression
ktor-server-compression = { module = "io.ktor:ktor-server-compression", version.ref = "ktor" }
# websockets
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
# content negotiation
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
#  content validation
ktor-server-request-validation = { module = "io.ktor:ktor-server-request-validation", version.ref = "ktor" }
# server status pages
ktor-server-status-pages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }
# openapi swagger ui
ktor-swagger-ui = { module = "io.github.smiley4:ktor-swagger-ui", version.ref = "ktor-swagger-ui" }
# Ktor HTTP Client
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-java = { module = "io.ktor:ktor-client-java", version.ref = "ktor" }
ktor-client-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
# For logging
kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
# For localization
lyricist = { module = "cafe.adriel.lyricist:lyricist", version.ref = "lyricist" }
lyricist-processor = { module = "cafe.adriel.lyricist:lyricist-processor", version.ref = "lyricist" }
lyricist-processorXml = { module = "cafe.adriel.lyricist:lyricist-processor-xml", version.ref = "lyricist" }
# For adaptive app layout
material3-adaptive = { module = "androidx.compose.material3:material3-adaptive", version.ref = "material3-adaptive" }
material3-adaptive-navigation-suite = { module = "androidx.compose.material3:material3-adaptive-navigation-suite", version.ref = "material3-adaptive" }
material3-window-size = { module = "androidx.compose.material3:material3-window-size-class", version.ref = "material3-window-size" }
material3-window-size-multiplatform = { module = "dev.chrisbanes.material3:material3-window-size-class-multiplatform", version.ref = "material3-window-size-multiplatform" }
# Icons
compose-icons-css-gg = { module = "br.com.devsrsouza.compose.icons:css-gg", version.ref = "compose-icons" }
compose-icons-weather-icons = { module = "br.com.devsrsouza.compose.icons:erikflowers-weather-icons", version.ref = "compose-icons" }
compose-icons-eva-icons = { module = "br.com.devsrsouza.compose.icons:eva-icons", version.ref = "compose-icons" }
compose-icons-feather = { module = "br.com.devsrsouza.compose.icons:feather", version.ref = "compose-icons" }
compose-icons-font-awesome = { module = "br.com.devsrsouza.compose.icons:font-awesome", version.ref = "compose-icons" }
compose-icons-line-awesome = { module = "br.com.devsrsouza.compose.icons:line-awesome", version.ref = "compose-icons" }
compose-icons-linea = { module = "br.com.devsrsouza.compose.icons:linea", version.ref = "compose-icons" }
compose-icons-octicons = { module = "br.com.devsrsouza.compose.icons:octicons", version.ref = "compose-icons" }
compose-icons-simple-icons = { module = "br.com.devsrsouza.compose.icons:simple-icons", version.ref = "compose-icons" }
compos-icons-tabler-icons = { module = "br.com.devsrsouza.compose.icons:tabler-icons", version.ref = "compose-icons" }
# Reflection
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin-reflect" }
# Key-value storage
multiplatform-settings-no-arg = { module = "com.russhwolf:multiplatform-settings-no-arg", version.ref = "multiplatform-settings" }
multiplatform-settings-serialization = { module = "com.russhwolf:multiplatform-settings-serialization", version.ref = "multiplatform-settings" }
multiplatform-settings-coroutines = { module = "com.russhwolf:multiplatform-settings-coroutines", version.ref = "multiplatform-settings" }
# Serialization
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinx-serialization" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
# Dependency injection
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-logger-slf4j = { module = "io.insert-koin:koin-logger-slf4j", version.ref = "koin" }
koin-annotations = { module = "io.insert-koin:koin-annotations", version.ref = "koin-ksp-compiler" }
koin-ksp-compiler = { module = "io.insert-koin:koin-ksp-compiler", version.ref = "koin-ksp-compiler" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koin-compose" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
koin-ktor = { module = "io.insert-koin:koin-ktor", version.ref = "koin" }
# GraphQL server
kgraphql = { module = "com.apurebase:kgraphql", version.ref = "kgraphql" }
kgraphql-ktor = { module = "com.apurebase:kgraphql-ktor", version.ref = "kgraphql" }
# GraphQL client
apollo-runtime = { module = "com.apollographql.apollo3:apollo-runtime", version.ref = "apollo3" }
apollo-normalized-cache = { module = "com.apollographql.apollo3:apollo-normalized-cache", version.ref = "apollo3" }
# Local database
sql-delight-sqlite-driver = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sql-delight" }
sql-delight-android-driver = { module = "app.cash.sqldelight:android-driver", version.ref = "sql-delight" }
sql-delight-native-driver = { module = "app.cash.sqldelight:native-driver", version.ref = "sql-delight" }
sql-delight-js-driver = { module = "app.cash.sqldelight:sqljs-driver", version.ref = "sql-delight" }
sql-delight-coroutines-extension = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sql-delight" }
sql-delight-primitive-adapters = { module = "app.cash.sqldelight:primitive-adapters", version.ref = "sql-delight" }
# Model-View-Intent
mvi-kotlin = { module = "com.arkivanov.mvikotlin:mvikotlin", version.ref = "mvi-kotlin" }
mvi-kotlin-main = { module = "com.arkivanov.mvikotlin:mvikotlin-main", version.ref = "mvi-kotlin" }
mvi-kotlin-extensions-coroutines = { module = "com.arkivanov.mvikotlin:mvikotlin-extensions-coroutines", version.ref = "mvi-kotlin" }
# Navigation
decompose = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
decompose-extensions-compose = { module = "com.arkivanov.decompose:extensions-compose", version.ref = "decompose" }
# Lifecycle
lifecycle = { module = "com.arkivanov.essenty:lifecycle", version.ref = "lifecycle" }
# Android features
android-play-core = { module = "com.google.android.play:core", version.ref = "android-play" }
# Kotlin coroutines for async
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }
coroutines-javafx = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-javafx", version.ref = "coroutines" }
coroutines-swing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "coroutines" }
# Image from url
kamel-image = { module = "media.kamel:kamel-image", version.ref = "kamel-image" }
# IO
kotlinx-io-core = { module = "org.jetbrains.kotlinx:kotlinx-io-core", version.ref = "kotlinx-io-core" }
# DateTime
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
# Cache
cache4k = { module = "io.github.reactivecircus.cache4k:cache4k", version.ref = "cache4k" }
# Server logger
kotlin-logging-jvm = { module = "io.github.microutils:kotlin-logging-jvm", version.ref = "kotlin-logging-jvm" }
# Database
kotysa-r2dbc = { module = "org.ufoss.kotysa:kotysa-r2dbc", version.ref = "kotysa-r2dbc" }
r2dbc-pool = { module = "io.r2dbc:r2dbc-pool", version.ref = "r2dbc-pool" }
r2dbc-h2 = { module = "io.r2dbc:r2dbc-h2", version.ref = "r2dbc-h2" }
oracle-r2dbc = { module = "com.oracle.database.r2dbc:oracle-r2dbc", version.ref = "oracle-r2dbc" }
# Result for error handling Railway Oriented Programming
kotlin-result = { module = "com.michael-bull.kotlin-result:kotlin-result", version.ref = "kotlin-result" }
# BCrypt
bcrypt = { module = "de.nycode:bcrypt", version.ref = "bcrypt" }
# No argument constructor
kotlin-noarg = { module = "org.jetbrains.kotlin:kotlin-noarg", version.ref = "kotlin-noarg" }
# Reflection utils
reflections = { module = "org.reflections:reflections", version.ref = "reflections" }
# Configuration from file
hoplite-core = { module = "com.sksamuel.hoplite:hoplite-core", version.ref = "hoplite" }
hoplite-yaml = { module = "com.sksamuel.hoplite:hoplite-yaml", version.ref = "hoplite" }
# Kotlin multiplatform utils
kmputils-common = { module = "pro.respawn.kmmutils:common", version.ref = "kmputils" }
kmputils-datetime = { module = "pro.respawn.kmmutils:datetime", version.ref = "kmputils" }
kmputils-coroutines = { module = "pro.respawn.kmmutils:coroutines", version.ref = "kmputils" }
kmputils-inputforms = { module = "pro.respawn.kmmutils:inputforms", version.ref = "kmputils" }
# Http Client generator
ktorfit-lib = { module = "de.jensklingenberg.ktorfit:ktorfit-lib", version.ref = "ktorfit" }
ktorfit-ksp = { module = "de.jensklingenberg.ktorfit:ktorfit-ksp", version.ref = "ktorfit" }
# AppConfig
konfigure = { module = "nz.co.trademe.konfigure:konfigure", version.ref = "konfigure" }
konfigure-android = { module = "nz.co.trademe.konfigure:konfigure-android", version.ref = "konfigure" }
konfigure-firebase = { module = "nz.co.trademe.konfigure:konfigure-firebase", version.ref = "konfigure" }
# Logging
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
slf4j-simple = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }
# Data table
data-table-material3 = { module = "com.seanproctor:data-table-material3", version.ref = "data-table" }
# Map
worldwind = { module = "earth.worldwind:worldwind", version.ref = "worldwind" }
gov-worldwind = { module = "com.github.pcmehlitz:worldwind-pcm", version.ref = "gov-worldwind" }
# Data mapper
kconmapper-annotations = { module = "com.github.yanneckreiss.kconmapper:annotations", version.ref = "kconmapper" }
kconmapper-ksp = { module = "com.github.yanneckreiss.kconmapper:ksp", version.ref = "kconmapper" }
# Context menu
compose-material-context-menu = { module = "io.github.dzirbel:compose-material-context-menu", version.ref = "compose-material-context-menu" }

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
jetbrainsCompose = { id = "org.jetbrains.compose", version.ref = "compose-plugin" }
kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
# Serialization
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
# GraphQL
apollo3 = { id = "com.apollographql.apollo3", version.ref = "apollo3" }
sqlDelight = { id = "app.cash.sqldelight", version.ref = "sql-delight" }
# Documentation
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
# Http Client generator
ktorfit = { id = "de.jensklingenberg.ktorfit", version.ref = "ktorfit" }
# Make kotlin class open
allopen = { id = "org.jetbrains.kotlin.plugin.allopen", version.ref = "kotlin" }
# Make kotlin class open
noarg = { id = "org.jetbrains.kotlin.plugin.noarg", version.ref = "kotlin" }

[bundles]
compose-icons = [
    "compose-icons-css-gg",
    "compose-icons-weather-icons",
    "compose-icons-eva-icons",
    "compose-icons-feather",
    "compose-icons-font-awesome",
    "compose-icons-line-awesome",
    "compose-icons-linea",
    "compose-icons-octicons",
    "compose-icons-simple-icons",
    "compos-icons-tabler-icons"
]
multiplatform-settings = [
    "multiplatform-settings-no-arg",
    "multiplatform-settings-serialization",
    "multiplatform-settings-coroutines"
]
koin = [
    "koin-core",
    "koin-logger-slf4j",
    "koin-annotations",
    "koin-ksp-compiler"
]
apollo3 = ["apollo-runtime", "apollo-normalized-cache"]
ktor-common = [
    "ktor-serialization-kotlinx-json",
    "ktor-serialization-kotlinx-xml",
    "ktor-serialization-kotlinx-cbor",
    "ktor-serialization-kotlinx-protobuf",
    "ktor-network-tls-certificates",
]
ktor-client = [
    "ktor-client-content-negotiation",
    "ktor-client-core",
    "ktor-client-logging",
]
ktor-server = [
    "ktor-server-core",
    "ktor-server-netty",
    "ktor-server-tests",
    "ktor-server-config-yaml",
    "ktor-server-cors",
    "ktor-server-auth",
    "ktor-server-auth-jwt",
    "ktor-server-host-common",
    "ktor-server-compression",
    "ktor-server-websockets",
    "ktor-server-content-negotiation",
    "ktor-server-request-validation",
    "ktor-server-status-pages",
    "ktor-swagger-ui",
]
sql-delight = [
    "sql-delight-coroutines-extension",
    "sql-delight-primitive-adapters"
]
mvi-kotlin = [
    "mvi-kotlin",
    "mvi-kotlin-main",
    "mvi-kotlin-extensions-coroutines"
]
decompose = [
    "decompose",
    "decompose-extensions-compose"
]
kmputils = [
    "kmputils-common",
    "kmputils-datetime",
    "kmputils-coroutines",
    "kmputils-inputforms"
]
ktorfit = [
    "ktorfit-lib",
    "ktorfit-ksp"
]
konfigure = [
    "konfigure",
    "konfigure-firebase"
]
kotlinx-serialization = [
    "kotlinx-serialization-core",
    "kotlinx-serialization-json",
]
slf4j = [
    "slf4j-api",
    "slf4j-simple",
]